{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { makeRequestUsers } from \"../makeRequestUsers.js\";\n\nconst useFetchUsers = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const res = await makeRequestUsers.get(url);\n        setData(res.data.data);\n      } catch (err) {\n        setError(true);\n      }\n\n      setLoading(false);\n    };\n\n    fetchData();\n  }, [url]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n\n_s(useFetchUsers, \"bUDdnDopLs7sI4ubr9BcUYSaQYs=\");\n\nexport default useFetchUsers;","map":{"version":3,"sources":["/Users/Jason/Desktop/Folders/milliondollar-web-app/client/src/hooks/useFetchUsers.js"],"names":["useEffect","useState","makeRequestUsers","useFetchUsers","url","data","setData","loading","setLoading","error","setError","fetchData","res","get","err"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,wBAAjC;;AAEA,MAAMC,aAAa,GAAIC,GAAD,IAAS;AAAA;;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,SAAS,GAAG,YAAY;AAC1B,UAAG;AACCH,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAMI,GAAG,GAAG,MAAMV,gBAAgB,CAACW,GAAjB,CAAqBT,GAArB,CAAlB;AACAE,QAAAA,OAAO,CAACM,GAAG,CAACP,IAAJ,CAASA,IAAV,CAAP;AACH,OAJD,CAIE,OAAOS,GAAP,EAAY;AACVJ,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACDF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KATD;;AAWAG,IAAAA,SAAS;AACZ,GAbQ,EAaN,CAACP,GAAD,CAbM,CAAT;AAeA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAP;AACH,CArBD;;GAAMN,a;;AAuBN,eAAeA,aAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { makeRequestUsers } from \"../makeRequestUsers.js\";\n\nconst useFetchUsers = (url) => {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try{\n                setLoading(true)\n                const res = await makeRequestUsers.get(url);\n                setData(res.data.data);\n            } catch (err) {\n                setError(true)\n            }\n            setLoading(false)\n        };\n\n        fetchData();\n    }, [url]);\n\n    return { data, loading, error };\n};\n\nexport default useFetchUsers;"]},"metadata":{},"sourceType":"module"}