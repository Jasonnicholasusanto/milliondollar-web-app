{"ast":null,"code":"var _jsxFileName = \"/Users/Jason/Desktop/Folders/milliondollar-web-app/client/src/components/DPList/DPList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./DPList.scss\";\nimport useFetch from '../../hooks/useFetch';\nimport DPCard from '../DPCard/DPCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DPList = _ref => {\n  _s();\n\n  let {\n    subCats,\n    maxPrice,\n    sort,\n    categoryId\n  } = _ref;\n  // let query = `/posters?populate=*&[filters][poster_materials][id]=${categoryId}${subCats.map(\n  //     (item) => `&[filters][sub_categories][id][$eq]=${item}`\n  // )}&[filters][price][$lte]=${maxPrice}`\n  let query = `/digital-planners?populate=*`;\n  console.log(subCats);\n\n  if (categoryId) {\n    query += `&[filters][digital_planner_categories][id]=${categoryId}${subCats.map(item => `&[filters][digital_planner_subcategories][id][$eq]=${item}`)}&[filters][price][$lte]=${maxPrice}`;\n  } else {\n    query += `&[filters][price][$lte]=${maxPrice}`;\n  }\n\n  if (sort !== null) {\n    query += `&sort=price:${sort}`;\n  }\n\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(query);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list\",\n    children: error ? \"Oops! Something went wrong.\" : loading ? \"loading...\" : (data === null || data === void 0 ? void 0 : data.length) !== 0 ? data === null || data === void 0 ? void 0 : data.map(item => /*#__PURE__*/_jsxDEV(DPCard, {\n      item: item\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 56\n    }, this)) : \"No items found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DPList, \"r14mJDRFIohEWG5JuFWBli83tkQ=\", false, function () {\n  return [useFetch];\n});\n\n_c = DPList;\nexport default DPList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DPList\");","map":{"version":3,"sources":["/Users/Jason/Desktop/Folders/milliondollar-web-app/client/src/components/DPList/DPList.jsx"],"names":["React","useState","useFetch","DPCard","DPList","subCats","maxPrice","sort","categoryId","query","console","log","map","item","data","loading","error","length","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,eAAP;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;;AAEA,MAAMC,MAAM,GAAG,QAA6C;AAAA;;AAAA,MAA5C;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,IAArB;AAA2BC,IAAAA;AAA3B,GAA4C;AAExD;AACA;AACA;AAEA,MAAIC,KAAK,GAAI,8BAAb;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;;AAEA,MAAIG,UAAJ,EAAgB;AACZC,IAAAA,KAAK,IAAK,8CAA6CD,UAAW,GAAEH,OAAO,CAACO,GAAR,CAC/DC,IAAD,IAAW,sDAAqDA,IAAK,EADL,CAElE,2BAA0BP,QAAS,EAFrC;AAGH,GAJD,MAIO;AACHG,IAAAA,KAAK,IAAK,2BAA0BH,QAAS,EAA7C;AACH;;AAGD,MAAIC,IAAI,KAAK,IAAb,EAAmB;AACfE,IAAAA,KAAK,IAAK,eAAcF,IAAK,EAA7B;AACH;;AAED,QAAM;AAAEO,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2Bd,QAAQ,CACrCO,KADqC,CAAzC;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,cACKO,KAAK,GAAG,6BAAH,GACLD,OAAO,GAAG,YAAH,GACP,CAAAD,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEG,MAAN,MAAiB,CAAjB,GAAsBH,IAAtB,aAAsBA,IAAtB,uBAAsBA,IAAI,CAAEF,GAAN,CAAWC,IAAD,iBAAU,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAEA;AAAd,OAAyBA,IAAI,CAACK,EAA9B;AAAA;AAAA;AAAA;AAAA,YAApB,CAAtB,GACG;AAJR;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CApCD;;GAAMd,M;UAuB+BF,Q;;;KAvB/BE,M;AAsCN,eAAeA,MAAf","sourcesContent":["import React, { useState } from 'react';\nimport \"./DPList.scss\";\nimport useFetch from '../../hooks/useFetch';\nimport DPCard from '../DPCard/DPCard';\n\nconst DPList = ({ subCats, maxPrice, sort, categoryId }) => {\n\n    // let query = `/posters?populate=*&[filters][poster_materials][id]=${categoryId}${subCats.map(\n    //     (item) => `&[filters][sub_categories][id][$eq]=${item}`\n    // )}&[filters][price][$lte]=${maxPrice}`\n\n    let query = `/digital-planners?populate=*`;\n\n    console.log(subCats);\n    \n    if (categoryId) {\n        query += `&[filters][digital_planner_categories][id]=${categoryId}${subCats.map(\n            (item) => `&[filters][digital_planner_subcategories][id][$eq]=${item}`\n        )}&[filters][price][$lte]=${maxPrice}`;\n    } else {\n        query += `&[filters][price][$lte]=${maxPrice}`;\n    }\n\n\n    if (sort !== null) {\n        query += `&sort=price:${sort}`;\n    }\n\n    const { data, loading, error } = useFetch(\n        query\n    );\n\n    return (\n        <div className=\"list\">\n            {error ? \"Oops! Something went wrong.\" : \n            (loading ? \"loading...\" : \n            (data?.length !== 0 ? (data?.map((item) => <DPCard item={item} key={item.id}/>)) :\n                \"No items found.\"\n            ))} \n        </div>\n    )\n}\n\nexport default DPList; "]},"metadata":{},"sourceType":"module"}